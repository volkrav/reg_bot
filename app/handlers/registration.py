import logging

import aiogram.utils.markdown as fmt
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from app.data.db_api import db_add_device, db_check_connect
from app.handlers.back import command_back, command_start
from app.keyboards import reply
from app.misc.classes import CheckIn, Start, create_device, ConnectionErrorDB
from app.misc.utils import (check_ip, check_name, reply_not_validation_ip,
                            reply_not_validation_name)

logger = logging.getLogger(__name__)


async def command_start_registration(message: types.Message, state: FSMContext):
    await CheckIn.start.set()
    try:
        await db_check_connect()
    except ConnectionErrorDB:
        await message.answer(
            '‚ùå –í–∏–±–∞—á—Ç–µ, –∑–∞—Ä–∞–∑ —è –Ω–µ –º–æ–∂—É –æ–±—Ä–æ–±–∏—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Ç.\n' +
            '‚úâÔ∏è –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n'
            '–°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å.'
        )
        logger.error(
            f'{message.from_user.id} get ConnectionErrorDB'
        )
        return await command_start(message, state)

    await message.answer(
        text='‚úÖ –í —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –º–æ–∂–Ω–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π',
        reply_markup=reply.kb_cancel
    )
    logger.info(
        f'{message.from_user.id} started registration'
    )
    await CheckIn.name.set()
    await message.answer(
        text="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–∏—Å—Ç—Ä–æ—é ‚§µÔ∏è",
        reply_markup=reply.kb_cancel
    )


async def command_cancel(message: types.Message, state: FSMContext):
    logger.info(
        f'{message.from_user.id} canceled registration'
    )
    await state.finish()
    await CheckIn.canceled.set()
    await command_back(message, state)


async def enter_name(message: types.Message, state: FSMContext):
    if await check_name(fmt.quote_html(message.text)):
        async with state.proxy() as data:
            data['user_id'] = message.from_user.id
            data['name'] = fmt.quote_html(message.text)
        logger.info(
            f'{message.from_user.id} '
            f'entered the name {message.text}'
        )
        await CheckIn.ip.set()
        await message.answer(
            text="–í–≤–µ–¥—ñ—Ç—å IP –ø—Ä–∏—Å—Ç—Ä–æ—é  ‚§µÔ∏è",
            reply_markup=reply.kb_cancel
        )
    else:
        logger.warning(
            f'{message.from_user.id} '
            f'entered an unsupported name {message.text}'
        )
        await reply_not_validation_name(message)


async def enter_ip(message: types.Message, state: FSMContext):
    if await check_ip(fmt.quote_html(message.text)):
        async with state.proxy() as data:
            data['ip'] = fmt.quote_html(message.text)
        logger.info(
            f'{message.from_user.id} '
            f'entered the IP {message.text}'
        )
        await CheckIn.do_not_disturb.set()
        await message.answer(
            text='–í–≤—ñ–º–∫–Ω—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é "–ù–µ —Ç—É—Ä–±—É–≤–∞—Ç–∏ –≤–Ω–æ—á—ñ"?\n' +
            '–Ø–∫—â–æ —É–≤—ñ–º–∫–Ω—É—Ç–∏ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é, —Ç–æ –∑ 23:00 –¥–æ 7:00 –±–æ—Ç ' +
            '–Ω–µ –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É —Ü—å–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é.',
            reply_markup=reply.kb_yes_or_no
        )
    else:
        logger.warning(
            f'{message.from_user.id} '
            f'entered an unsupported IP {message.text}'
        )
        await reply_not_validation_ip(message)


async def is_disturb(message: types.Message, state: FSMContext):
    msg_text = (False, True)[message.text == '–¢–∞–∫']
    async with state.proxy() as data:
        data['do_not_disturb'] = msg_text
    async with state.proxy() as data:
        device = await create_device(data)
    try:
        await db_add_device(device)
        answer = (
            f'‚úÖ –î–æ–¥–∞–≤ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –Ω–æ–≤–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π:\n'
            f'- <b>–ù–∞–∑–≤–∞:</b> {device.name}\n'
            f'- <b>IP:</b> {device.ip}\n'
            f'- <b>–ù–µ —Ç—É—Ä–±—É–≤–∞—Ç–∏ –≤–Ω–æ—á—ñ:</b> {("üî¥ –≤–∏–º–∫–Ω–µ–Ω–æ", "üü¢ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ")[device.do_not_disturb]}\n'
        )
    except ConnectionErrorDB:
        answer = (
            f'‚ö†Ô∏è –ù–∞ –∂–∞–ª—å, –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø—Ä–∏—Å—Ç—Ä–æ—é {device.name} –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.\n'
            f'‚úâÔ∏è –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ü—é –ø–æ–º–∏–ª–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n'
            f'–°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –¥–µ–≤–∞–π—Å —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å.'
        )
    await message.answer(answer)
    await state.finish()
    await Start.free.set()
    await command_start(message, state)


def register_reg(dp: Dispatcher):
    dp.register_message_handler(command_start_registration,
                                Text(equals='–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π',
                                     ignore_case=True),
                                state='*')
    dp.register_message_handler(command_cancel,
                                Text(equals='‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏',
                                     ignore_case=True),
                                state=list(CheckIn.all_states_names))
    dp.register_message_handler(enter_name,
                                state=CheckIn.name)
    dp.register_message_handler(enter_ip,
                                state=CheckIn.ip)
    dp.register_message_handler(is_disturb,
                                state=CheckIn.do_not_disturb)
