import logging
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from aiogram.dispatcher.filters import Text

from app.keyboards import reply
from app.misc.classes import CheckIn, Start
from app.misc.classes import create_device
from app.handlers.back import command_back, command_start
from app.data.db_api import db_add_device
from app.misc.utils import check_ip


logger = logging.getLogger(__name__)


async def command_start_registration(message: types.Message, state: FSMContext):
    await message.answer(
        text='‚úÖ –í —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –º–æ–∂–Ω–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π',
        reply_markup=reply.kb_cancel
    )
    logger.info(
        f'<command_start_registration> OK {message.from_user.id} '
        f'started registration'
    )
    await CheckIn.name.set()
    await message.answer(
        text="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–∏—Å—Ç—Ä–æ—é ‚§µÔ∏è",
        reply_markup=reply.kb_cancel
    )


async def command_cancel(message: types.Message, state: FSMContext):
    logger.info(
        f'<command_cancel> OK {message.from_user.id} '
        f'canceled registration'
    )
    await state.finish()
    await CheckIn.canceled.set()
    await command_back(message, state)


async def enter_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_id'] = message.from_user.id
        data['name'] = message.text
    await CheckIn.ip.set()
    await message.answer(
        text="–í–≤–µ–¥—ñ—Ç—å IP –ø—Ä–∏—Å—Ç—Ä–æ—é  ‚§µÔ∏è",
        reply_markup=reply.kb_cancel
    )


async def enter_ip(message: types.Message, state: FSMContext):
    if await check_ip(message.text):
        async with state.proxy() as data:
            data['ip'] = message.text
        await CheckIn.do_not_disturb.set()
        await message.answer(
            text='–í–≤—ñ–º–∫–Ω—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é "–ù–µ —Ç—É—Ä–±—É–≤–∞—Ç–∏ –≤–Ω–æ—á—ñ:"',
            reply_markup=reply.kb_yes_or_no
        )
    else:
        await message.reply(
            text='‚ÄºÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç IP –∞–¥—Ä–µ—Å–∏ ‚ÄºÔ∏è\n\n' +
            'IP-–∞–¥—Ä–µ—Å–∏ —î –Ω–∞–±—ñ—Ä –∑ —á–æ—Ç–∏—Ä—å–æ—Ö —á–∏—Å–µ–ª, —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏—Ö —Ç–æ—á–∫–∞–º–∏, ' +
            '–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 192.158.1.38. –ö–æ–∂–Ω–µ —á–∏—Å–ª–æ —Ü—å–æ–≥–æ –Ω–∞–±–æ—Ä—É –Ω–∞–ª–µ–∂–∏—Ç—å ' +
            '—ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –≤—ñ–¥ 0 –¥–æ 255. –¢–∞–∫–∏–º —á–∏–Ω–æ–º, –ø–æ–≤–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω ' +
            'IP-–∞–¥—Ä–µ—Å–∞—Ü—ñ—ó ‚Äì —Ü–µ –∞–¥—Ä–µ—Å–∏ –≤—ñ–¥ 0.0.0.0 –¥–æ 255.255.255.255\n\n' +
            '–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è IP –ø—Ä–∏—Å—Ç—Ä–æ—é  ‚§µÔ∏è',
            reply_markup=reply.btn_cancel
        )


async def is_disturb(message: types.Message, state: FSMContext):
    msg_text = (False, True)[message.text == '–¢–∞–∫']
    async with state.proxy() as data:
        data['do_not_disturb'] = msg_text
    async with state.proxy() as data:
        device = await create_device(data)
    try:
        await db_add_device(device)
        # do_not_disturb = ('üî¥', 'üü¢')[device.do_not_disturb]
        answer = (
            f'‚úÖ –î–æ–¥–∞–≤ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –Ω–æ–≤–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π:\n'
            f'- <b>–ù–∞–∑–≤–∞:</b> {device.name}\n'
            f'- <b>IP:</b> {device.ip}\n'
            f'- <b>–ù–µ —Ç—É—Ä–±—É–≤–∞—Ç–∏ –≤–Ω–æ—á—ñ:</b> {("üî¥", "üü¢")[device.do_not_disturb]}\n'
        )
    except Exception as err:
        answer = (
            f'‚ö†Ô∏è –ù–∞ –∂–∞–ª—å, –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø—Ä–∏—Å—Ç—Ä–æ—é {device.name} –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.\n'
            f'‚úâÔ∏è –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n'
            f'–°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –¥–µ–≤–∞–π—Å —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å.'
        )
    await message.answer(answer)
    await state.finish()
    await Start.free.set()
    await command_start(message, state)


def register_reg(dp: Dispatcher):
    dp.register_message_handler(command_start_registration,
                                Text(equals='–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π',
                                     ignore_case=True),
                                state='*')
    dp.register_message_handler(command_cancel,
                                Text(equals='‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏',
                                     ignore_case=True),
                                state=list(CheckIn.all_states_names))
    dp.register_message_handler(enter_name,
                                state=CheckIn.name)
    dp.register_message_handler(enter_ip,
                                state=CheckIn.ip)
    dp.register_message_handler(is_disturb,
                                state=CheckIn.do_not_disturb)
